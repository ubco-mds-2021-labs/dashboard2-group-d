options = list(list(label = "Interior", value = "Interior"),
list(label = "Fraser", value = "Fraser"),
list(label = "Vancouver Coastal", value = "Vancouver Coastal"),
list(label = "Vancouver Island", value = "Vancouver Island"),
list(label = "Northern", value = "Northern"),
list(label = "Provincial", value = "Provincial Health Services Authority")),
value = 'Interior'
)
)
)
###### Map data and plot #########################
map <- function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
#################################################
# map object
map_object <- map("Interior")
app %>% set_layout(list(
yr_slider,
ha_buttons,
dccGraph(figure = map_object)
)
)
####### Call back for map ###################################
app$callback(
output('map-bc', 'figure'),
list(input("health_authority_buttons","value")),
function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
)
app %>% run_app()
library(plotly)
library(dash)
library(tidyverse)
library(devtools)
library(dashCoreComponents)
library(dashHtmlComponents)
library(OpenImageR)
#library(png)
#library(patchwork)
#library(base64enc)
app <- dash_app()
# Set the layout of the app
#year <- to_vec(for (x in seq("2007","2022")) paste(x,"=",x) )
# year slider
yr_slider <- htmlDiv(
list(
dccRangeSlider(
id="year_slider",
min = 2015,
max = 2022,
marks=list(
"2015" = "2015",
"2016" = "2016",
"2017" = "2017",
"2018" = "2018",
"2019" = "2019",
"2020" = "2020",
"2021" = "2021",
"2022" = "2022"
),
step=1,
value=list(2017,2022)
)
)
)
#health_authority buttons
ha_buttons <- htmlDiv(
list(
dccDropdown(
id="health_authority_buttons",
options = list(list(label = "Interior", value = "Interior"),
list(label = "Fraser", value = "Fraser"),
list(label = "Vancouver Coastal", value = "Vancouver Coastal"),
list(label = "Vancouver Island", value = "Vancouver Island"),
list(label = "Northern", value = "Northern"),
list(label = "Provincial", value = "Provincial Health Services Authority")),
value = 'Interior'
)
)
)
###### Map data and plot #########################
map <- function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
#################################################
# map object
map_object <- map("Interior")
app %>% set_layout(list(
yr_slider,
ha_buttons,
dccGraph(id = "macp-bc")
)
)
####### Call back for map ###################################
app$callback(
output('map-bc', 'figure'),
list(input("health_authority_buttons","value")),
function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
)
app %>% run_app()
library(plotly)
library(dash)
library(tidyverse)
library(devtools)
library(dashCoreComponents)
library(dashHtmlComponents)
library(OpenImageR)
#library(png)
#library(patchwork)
#library(base64enc)
app <- dash_app()
# Set the layout of the app
#year <- to_vec(for (x in seq("2007","2022")) paste(x,"=",x) )
# year slider
yr_slider <- htmlDiv(
list(
dccRangeSlider(
id="year_slider",
min = 2015,
max = 2022,
marks=list(
"2015" = "2015",
"2016" = "2016",
"2017" = "2017",
"2018" = "2018",
"2019" = "2019",
"2020" = "2020",
"2021" = "2021",
"2022" = "2022"
),
step=1,
value=list(2017,2022)
)
)
)
#health_authority buttons
ha_buttons <- htmlDiv(
list(
dccDropdown(
id="health_authority_buttons",
options = list(list(label = "Interior", value = "Interior"),
list(label = "Fraser", value = "Fraser"),
list(label = "Vancouver Coastal", value = "Vancouver Coastal"),
list(label = "Vancouver Island", value = "Vancouver Island"),
list(label = "Northern", value = "Northern"),
list(label = "Provincial", value = "Provincial Health Services Authority")),
value = 'Interior'
)
)
)
###### Map data and plot #########################
map <- function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
#################################################
# map object
map_object <- map("Interior")
app %>% set_layout(list(
yr_slider,
ha_buttons,
dccGraph(id = "macp-bc")
)
)
####### Call back for map ###################################
app$callback(
output('map-bc', 'figure'),
list(input("health_authority_buttons","value")),
function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
)
app %>% run_app()
library(plotly)
library(dash)
library(tidyverse)
library(devtools)
library(dashCoreComponents)
library(dashHtmlComponents)
library(OpenImageR)
#library(png)
#library(patchwork)
#library(base64enc)
app <- dash_app()
# Set the layout of the app
#year <- to_vec(for (x in seq("2007","2022")) paste(x,"=",x) )
# year slider
yr_slider <- htmlDiv(
list(
dccRangeSlider(
id="year_slider",
min = 2015,
max = 2022,
marks=list(
"2015" = "2015",
"2016" = "2016",
"2017" = "2017",
"2018" = "2018",
"2019" = "2019",
"2020" = "2020",
"2021" = "2021",
"2022" = "2022"
),
step=1,
value=list(2017,2022)
)
)
)
#health_authority buttons
ha_buttons <- htmlDiv(
list(
dccDropdown(
id="health_authority_buttons",
options = list(list(label = "Interior", value = "Interior"),
list(label = "Fraser", value = "Fraser"),
list(label = "Vancouver Coastal", value = "Vancouver Coastal"),
list(label = "Vancouver Island", value = "Vancouver Island"),
list(label = "Northern", value = "Northern"),
list(label = "Provincial", value = "Provincial Health Services Authority")),
value = 'Interior'
)
)
)
###### Map data and plot #########################
map <- function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff',showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
#################################################
# map object
map_object <- map("Interior")
app %>% set_layout(list(
yr_slider,
ha_buttons,
dccGraph(id = "map-bc")
)
)
####### Call back for map ###################################
app$callback(
output('map-bc', 'figure'),
list(input("health_authority_buttons","value")),
function(authority = "Interior"){
if(authority == "Interior"){
img = readImage('data/images/interior.png')
}
if(authority == "Fraser"){
img = readImage('data/images/fraser.png')
}
if(authority == "Vancouver Coastal"){
img = readImage('data/images/vancoastal.png')
}
if(authority == "Vancouver Island"){
img = readImage('data/images/vanisland.png')
}
if(authority == "Northern"){
img = readImage('data/images/northern.png')
}
if(authority == "Provincial Health Services Authority"){
img = readImage('data/images/provincial.png')
}
map_plot <- plot_ly() %>%
layout(
images = list(
source = raster2uri(as.raster(img)),
x = 0, y = 0,
sizex = 4, sizey = 4,
xref = "x", yref = "y",
xanchor = "left", yanchor = "bottom"
#sizing = "stretch"
),
xaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
yaxis=list(showticklabels=FALSE, zerolinecolor = '#ffff', showgrid = F),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE)
)
return(map_plot)
}
)
app %>% run_app()
